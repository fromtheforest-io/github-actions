name: Org Deploy Workflow

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:
  # deploy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploying version
  #       run: echo "Deploying version ${{ inputs.version }}"

  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - run: npm ci
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - run: npm ci
      - run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - run: npm ci
      - run: npm run build

      - name: Upload Next.js build
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./out

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
      - lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set Variables
        run: |
          export APP=ftf
          export ENV=dev
          export SSM_NAMESPACE=/$APP/$ENV
          export PREFIX=$APP-$ENV
          export WEB_SSM_NAMESPACE=/$APP/$ENV/fromtheforest-io

          export DOMAIN_NAME=$(aws ssm get-parameter --name $SSM_NAMESPACE/domain| jq -r '.Parameter.Value')

          echo "SSM_NAMESPACE=$SSM_NAMESPACE" >> $GITHUB_ENV
          echo "STACK_NAME=$PREFIX-fromtheforest-io" >> $GITHUB_ENV
          echo "TEMPLATE=./infra/template.yml" >> $GITHUB_ENV

          echo "DOMAIN_NAME=$DOMAIN_NAME" >> $GITHUB_ENV

      - name: Validate
        run: |
          aws cloudformation validate-template \
            --template-body file://$TEMPLATE \
            --region ${{ secrets.AWS_REGION }}

      - name: Deploy Infrastructure
        if: github.ref == 'refs/heads/main'
        run: |
          aws cloudformation deploy \
            --stack-name $STACK_NAME \
            --template-file $TEMPLATE \
            --no-fail-on-empty-changeset \
            --region ${{ secrets.AWS_REGION }} \
            --parameter-overrides \
              HostedZoneName=$DOMAIN_NAME \
              DomainName=$DOMAIN_NAME \
              WebSsmNamespace=$WEB_SSM_NAMESPACE

      - name: Download build artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./out

      - name: Upload build to S3
        if: github.ref == 'refs/heads/main'
        run: |
          # install jq
          sudo apt-get update
          sudo apt-get install jq

          # get required ssm parameters
          DISTRIBUTION_ID=$(aws ssm get-parameter --name $WEB_SSM_NAMESPACE/distribution/id | jq -r '.Parameter.Value')
          SOURCE_BUCKET_NAME=$(aws ssm get-parameter --name $WEB_SSM_NAMESPACE/source-bucket/name | jq -r '.Parameter.Value')
          BUILD_DIRECTORY=./out

          # sync build to s3
          aws s3 sync $BUILD_DIRECTORY s3://$SOURCE_BUCKET_NAME --delete

          # invalidate cloudfront cache
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"
