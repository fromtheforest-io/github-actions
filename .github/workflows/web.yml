name: FTF Web Workflow

on:
  workflow_call:
    inputs:
      stack_name:
        type: string
        required: true
      ssm_org_name:
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

jobs:
  # define's SSM_NAMESPACE / STACK_NAME consistently
  context:
    uses: fromtheforest-io/github-actions/.github/workflows/context.yml@main
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    with:
      service_name: ${{inputs.stack_name}} 

  secrets: 
    name: Load Secrets
    runs-on: ubuntu-latest
    needs:
      - context
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get .env file
        run: |
          echo $(aws ssm get-parameter --name ${{ needs.context.outputs.ssm_namespace }}/domain | jq -r '.Parameter.Value') >> .env
          echo BASE_API_URL=api.$(aws ssm get-parameter --name ${{ needs.context.outputs.ssm_namespace }}/domain | jq -r '.Parameter.Value') >> .env

      - name: Save .env atrifact 
        uses: actions/upload-artifact@v4
        with:
          name: environment variables 
          path: .env


  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - run: npm ci
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - run: npm ci
      - run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - install
      - secrets
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - run: npm ci
      - run: npm run build

      - name: Upload Next.js build
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./out 

  test:
    name: Test 
    runs-on: ubuntu-latest
    needs:
      - install
      - secrets
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - run: npm ci
      - run: npm run test

  deploy:
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - context
      - build
      - lint
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Set Variables
        run: |
          echo "WEB_SSM_NAMESPACE=${{ needs.context.outputs.ssm_namespace }}/${{ inputs.stack_name }}" >> $GITHUB_ENV
          echo "DOMAIN_NAME=$(aws ssm get-parameter --name ${{ needs.context.outputs.ssm_namespace }}/domain| jq -r '.Parameter.Value')" >> $GITHUB_ENV

      - name: Validate
        run: |
          aws cloudformation validate-template \
            --template-body file://./infra/template.yml \
            --region ${{ secrets.AWS_REGION }}

      - name: Deploy Infrastructure
        run: |
          aws cloudformation deploy \
            --stack-name ${{ needs.context.outputs.stack_name }} \
            --template-file ./infra/template.yml \
            --no-fail-on-empty-changeset \
            --region ${{ secrets.AWS_REGION }} \
            --parameter-overrides \
              HostedZoneName=$DOMAIN_NAME \
              HostedZoneId=${{ needs.context.outputs.ssm_namespace }}/hosted-zone/id \
              DomainName=${{ needs.context.outputs.ssm_namespace }}/domain \
              WebSsmNamespace=$WEB_SSM_NAMESPACE

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./out

      - name: Upload build to S3
        run: |
          # install jq
          sudo apt-get update
          sudo apt-get install jq

          # get required ssm parameters
          DISTRIBUTION_ID=$(aws ssm get-parameter --name $WEB_SSM_NAMESPACE/distribution/id | jq -r '.Parameter.Value')
          SOURCE_BUCKET_NAME=$(aws ssm get-parameter --name $WEB_SSM_NAMESPACE/source-bucket/name | jq -r '.Parameter.Value')
          BUILD_DIRECTORY=./out

          # sync build to s3
          aws s3 sync $BUILD_DIRECTORY s3://$SOURCE_BUCKET_NAME --delete

          # invalidate cloudfront cache
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"